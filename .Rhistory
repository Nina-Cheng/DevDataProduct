myplot(30)
myplot(28)
z<-qnorm(.95)
pnorm(30+z,mean=30,lower.tail=FALSE)
pnorm(30+z,mean=32,lower.tail=FALSE)
pnorm(30+z,mean=32,sd=1lower.tail=FALSE)
pnorm(30+z,mean=32,sd=1,lower.tail=FALSE)
pnorm(30+z,mean=32,sd=2,lower.tail=FALSE)
pnorm(30+z*2,mean=32,sd=2,lower.tail=FALSE)
run power.t.test(n = 16, delta = 2 / 4, sd=1, type = "one.sample", alt = "one.sided")$power
power.t.test(n = 16, delta = 2 / 4, sd=1, type = "one.sample", alt = "one.sided")$power
power.t.test(n = 16, delta = 2, sd=4, type = "one.sample", alt = "one.sided")$power
power.t.test(n = 16, delta = 100, sd=200, type = "one.sample", alt = "one.sided")$power
power.t.test(power = .8, delta = 2 / 4, sd=1, type = "one.sample", alt = "one.sided")$n
power.t.test(power = .8, delta = 2, sd=4, type = "one.sample", alt = "one.sided")$n
power.t.test(power = .8, delta = 100, sd=200, type = "one.sample", alt = "one.sided")$n
power.t.test(power = .8,n=26, sd=1, type = "one.sample", alt = "one.sided")$delta
power.t.test(power = .8,n=27, sd=1, type = "one.sample", alt = "one.sided")$delta
library(swirl)
swirl()
fit<-lm(child~parent, data=galton)
fit<-lm(child~parent, galton)
sqrt(sum(fit$residuals/(n-2)))
sqrt(sum(fit$residuals^2)/(n-2)))
sqrt(sum(fit$residuals^2)/(n-2))
summary(fit)$sigma
)
sqrt(deviance(fit)/(n-2))
mu<-mean(galton$child)
sTot<-sum((galton$child-mu)^2)
sRes<-deviance(sum(fit$residuals^2))
sRes<-deviance(sum(fit$residuals^2))
sRes<-deviance(sum(residuals^2))
fit<-lm(child~parent, galton)
sRes<-deviance(fit)
1-sRes/sTot
summary(fit)$r.squared
cor(galton$child, galton$parent)
cor(galton$parent,galton$child)^2
ones <- rep(1, nrow(galton))
lm(child ~ ones + parent -1, galton)
lm(child ~ parent, galton)
lm(child ~ 1, galton)
view(tree)
head(trees)
fit <- lm(Volume ~ Girth + Height + Constant -1, trees)
trees2 <- eliminate("Girth", trees)
head(trees2)
fit2 <- lm(Volume ~ Height + Constant -1, tree2)\
fit2 <- lm(Volume ~ Height + Constant -1, tree2)
fit2 <- lm(Volume ~ Height + Constant -1, trees2)
lapply(list(fit, fit2), coef)
lm(Fertility ~. , swiss)
all <- lm(Fertility ~ ., swiss)
Summary(all)
summary(all)
lm(Fertility ~ agriculture, swiss)
lm(Fertility ~ Agriculture, swiss)
summary(lm(Fertility ~ Agriculture, swiss))
cor(Examination, Education, swiss)
cor(Examination, Education\)
cor(Examination, Education)
cor(swiss$Examination, swiss$Education)
cor(swiss$Agriculture, swiss$Education)
makelms(swiss)
makelms()
ec<- swiss$Examination + swiss$Catholic
efit<-lm(Fertility~ . +ec, swiss)
efit$coef - all$coef
all$coefficients-efit$coefficients
6
dim(InspectSprays)
dim(InspectSpray)
dim(inspectSpray)
dim(Spray)
dim(inspectspray)
dim(InsectSpray)
dim(InsectSprays)
head(InsectSprays, 15)
sa
sA
summary(InsectSprays[,2])
sapply(InsectSprays,class)
fit<-lm(count~spray, InsectSprays)
fit$coef.
summary(fit)$coef
est<-summary(fit)$coef[,1]
mean(sA)
mean(sB)
nfit<-lm(count~spray-1)
nfit<-lm(count~spray-1,swiss)
nfit<-lm(count~spray-1,InsectSprays)
summary(nfit)$coef
relevel(InsectSprays$spray, "C")
spray2<-relevel(InsectSprays$spray, \"C\")
spray2<-relevel(InsectSprays$spray, "C")
fit2<-lm(count~spray, InsectSprays)
fit2<-lm(count~spray2, InsectSprays)
summary(fit2)
summary(fit2)$coef
mean(sC)
(fit$coef[2]-fit$coef[3])/1.6011
dim(hunger)
948
names(hunger)
fit<-lm(Numeric ~ Year, hunger)
summary(fit)$coef
lmF<-lm(hunger$Numeric[hunger$Sex=="Female"] ~ hunger$Year[hunger$Sex=="Female"])
lmM<-lm(hunger$Numeric[hunger$Sex=="Male"] ~ hunger$Year[hunger$Sex=="Male"])
lmBoth<-lm(Numeric ~ Year +Sex, hunger)
summary(lmBoth)
lmInter<-lm(Numeric ~ Year+ Sex+ Sex*Year, hunger)
summary(lmInter)
fit<-lm(y ~x, out2)
plot(fit, which =1)
fitno<-out2[-1,]
fitno<-lm(y~x, out2[-1,]
)
plot(fitno, which =1)
coef(fit)-coef(fitno)
head(dfbeta(fit))
resno <- out2[1, "y"] - predict(fitno, out2[1,])
1-resid(fit)[1]/resno
head(hatvalues(fit))
sigma<-sqrt(deviance(fit)/df(fit$residuals))
?df
sigma<-sqrt(deviance(fit)/n)
sigma <- sqrt(deviance(fit)/df.residual(fit))
rstd<-fit$residuals/(sigma*sqrt(1-hatvalues(fit)))
head(cbind(rstd, rstandard(fit)))
plot(fit, which=3)
plot(fit, which=2)
sigma1 <- sqrt(deviance(fitno)/df.residual(fitno))
fit$residuals[1]/(sigma1*sqrt(1-hatvalues(fit)[1]))
head(rstudent(fit))
dy<-predict(fitno, out2)-predict(fit, out2)
sum(dy^2)/(2*sigma^2)
plot(fit, which=5)
rgp1()
rgp2()
head(swiss)
mdl<-lm(Fertility ~ ., swiss)
vif(mdl)
mdl2 <-lm(Fertility ~ . - Examination, swiss)
vif(mdl2)
rm(list = ls())
mtcars
featureplot(mtcars)
library(caret)
featureplot(mtcars)
featurePlot(mtcars)
featurePlot(mtcars, mpg)
featurePlot(x=mtcars[,-1], y=mtcars$mpg, plot="pairs")
fit<-lm(mpg~ ., mtcars)
summary(fit)
vif(fit)
fit1<-lm(mpg~am, mtcars)
summary(fit1)
fit1<-lm(mpg~as.factor(am), mtcars)
summary(fit1)
fit<-lm(mpg~ .-am, mtcars)
vif(fit)
fit2<-lm(mpg~ hp + drat + wt + as.factor(am), mtcars)
summary(fit2)
fit2<-lm(mpg~ hp + wt + as.factor(am), mtcars)
summary(fit2)
fit2<-lm(mpg~ cyl+ hp + wt + as.factor(am), mtcars)
summary(fit2)
fit2<-lm(mpg~ as.factor(cyl)+ hp + wt + as.factor(am), mtcars)
summary(fit2)
fit2<-lm(mpg~ as.factor(cyl)+ hp + wt + as.factor(am)+carb, mtcars)
summary(fit2)
fit2<-lm(mpg~ cyl, mtcars)
summary(fit2)
fit3<-lm(mpg~ disp, mtcars)
summary(fit3)
fit4<-lm(mpg~ hp, mtcars)
summary(fit4)
fit5<-lm(mpg~ drat, mtcars)
summary(fit5)
fit5<-lm(mpg~ wt, mtcars)
summary(fit5)
fit5<-lm(mpg~ wt+as.factor(am), mtcars)
summary(fit5)
fit5<-lm(mpg~ wt*as.factor(am), mtcars)
summary(fit5)
featurePlot(x=mtcars[,-c(1,8)], y=mtcars$am, plot="pairs")
fit5<-lm(mpg~ cyl+ as.factor(am), mtcars)
summary(fit5)
fit5<-lm(mpg~ disp+ as.factor(am), mtcars)
summary(fit5)
fit5<-lm(mpg~ hp+ as.factor(am), mtcars)
summary(fit5)
fit5<-lm(mpg~ hp+ as.factor(am)+as.factor(vs), mtcars)
summary(fit5)
fit5<-lm(mpg~ hp+ as.factor(am)+as.factor(vs)+wt, mtcars)
summary(fit5)
fit5<-lm(mpg~ hp+ as.factor(am)+wt, mtcars)
summary(fit5)
fit5<-lm(mpg~ as.factor(cyl)+hp+ as.factor(am)+wt, mtcars)
summary(fit5)
fit5<-lm(mpg~ disp+hp+ as.factor(am)+wt, mtcars)
summary(fit5)
cor(hp,wt)
cor(mtcars$hp,mtcars$wt)
cor(mtcars$hp,mtcars$am)
cor(mtcars$cyl,mtcars$am)
cor(mtcars$disp,mtcars$am)
cor(mtcars$hp,mtcars$am)
cor(mtcars$drat,mtcars$am)
cor(mtcars$wt,mtcars$am)
cor(mtcars$qsec,mtcars$am)
cor(mtcars$qsec,mtcars$mpg)
cor(mtcars$vs,mtcars$am)
cor(mtcars$vs,mtcars$mpg)
cor(mtcars$am,mtcars$mpg)
fit5<-lm(mpg~ disp+hp+ as.factor(am)+wt+qsec, mtcars)
cor(mtcars$am,mtcars$mpg)
summary(fit5)
fit5<-lm(mpg~ hp+ as.factor(am)+wt+qsec, mtcars)
summary(fit5)
vif(fit5)
pairs(mtcars, main = "mtcars data")
coplot(mpg ~ wt|as.factor(am), data = mtcars,
panel = panel.smooth, rows = 1)
pairs(mtcars, main = "mtcars data")
coplot(mpg ~ hp|as.factor(am), data = mtcars,
panel = panel.smooth, rows = 1)
pairs(mtcars, main = "mtcars data")
coplot(mpg ~ as.factor(cyl)|as.factor(am), data = mtcars,
panel = panel.smooth, rows = 1)
fit5<-lm(mpg~ as.factor(cyl)+disp+hp+drat+ as.factor(am)+wt+qsec+as.factor(vs)+gear+carb, mtcars)
summary(fit5)
vif(fit5)
plot(fit5,which=1)
featurePlot(x=mtcars[,-c(1,9)], y=mtcars$am, plot="pairs")
featurePlot(x=mtcars[,-1], y=mtcars$mpg, plot="pairs")
fit1<-lm(mpg~as.factor(am), mtcars)
summary(fit1)
plot(fit1,which=1)
plot(fit1,which=2)
plot(fit1,which=3)
plot(fit1,which=4)
plot(fit1,which=5)
dfbeta(fit1)
fit2<-lm(mpg~as.factor(cyl)+disp+hp+drat+wt+qsec+as.factor(vs)+as.factor(am)+gear+carb, mtcars)
summary(fit2)
fit3<-lm(mpg~as.factor(cyl)+disp+hp+wt+qsec+as.factor(vs)+as.factor(am)+gear+carb, mtcars)
summary(fit3)
fit3<-lm(mpg~disp+hp+wt+qsec+as.factor(vs)+as.factor(am)+gear+carb, mtcars)
summary(fit3)
fit3<-lm(mpg~disp+hp+wt+qsec+as.factor(vs)+as.factor(am)+gear, mtcars)
summary(fit3)
fit3<-lm(mpg~disp+hp+wt+qsec+as.factor(vs)+as.factor(am), mtcars)
summary(fit3)
fit3<-lm(mpg~disp+hp+wt+qsec+as.factor(am), mtcars)
summary(fit3)
fit3<-lm(mpg~hp+wt+qsec+as.factor(am), mtcars)
summary(fit3)
fit3<-lm(mpg~wt+qsec+as.factor(am), mtcars)
summary(fit3)
vif(fit2)
vif(fit3)
cor(mtcars$qsec, mtcars$disp)
anova(fit2)
anova(fit2,fit3)
fit1<-lm(mpg~as.factor(am), mtcars)
summary(fit1)$coefficients
fit1<-lm(mpg~as.factor(am), mtcars)
summary(fit1)$R.squared
R-squared(fit1)
summary(fit1)$adj.r.squared
fit3<-lm(mpg~wt+as.factor(am), mtcars)
summary(fit3)$coefficients
summary(fit3)$adj.r.squared
fit3<-lm(mpg~wt+disp+hp +as.factor(am), mtcars)
summary(fit3)$coefficients
summary(fit3)$adj.r.squared
fit3<-lm(mpg~wt+hp +as.factor(am), mtcars)
summary(fit3)$coefficients
summary(fit3)$adj.r.squared
fit2<-lm(mpg~as.factor(cyl)+disp+hp+drat+wt+qsec+as.factor(vs)+as.factor(am)+gear+carb, mtcars)
summary(fit2)$coefficients
summary(fit2)$adj.r.squared
fit3<-lm(mpg~wt+qsec+as.factor(am), mtcars)
summary(fit3)$coefficients
summary(fit3)$adj.r.squared
plot(fit3, which=1)
plot(fit3, which=5)
plot(fit3, which=2)
plot(fit3, which=5)
plot(fit3, which=1)
plot(fit3, which=2)
defbetas(fit3)
hatvalues(fit3)
dfbetas(fit3)
max(hatvalues(fit3))
plot(fit3)
order(hatvalues(fit3))
hatvalues(fit3)[order(hatvalues(fit3)),5]
hatvalues(fit3)[order(hatvalues(fit3))]
hatvalues(fit3)[order(hatvalues(fit3))][5]
hatvalues(fit3)[order(hatvalues(fit3),descending=T)][1:5]
?order
hatvalues(fit3)[order(hatvalues(fit3),descreasing = T)][1:5]
order(hatvalues(fit3),descreasing = T)
order(hatvalues(fit3),descreasing = TRUE)
fit3<-lm(mpg~wt+qsec+as.factor(am), mtcars)
summary(fit3)$coefficients
summary(fit3)$adj.r.squared
summary(fit3)$coefficients[3,1]
summary(fit3)$coefficients[4,1]
PreInterval <- summary(fit3)$coefficients[4,1]+c(-1,1)*summary(fit3)$coefficients[4,2]
PreInterval
lm(mpg ~ I(wt * 0.5) + factor(cyl), data = mtcars)
choose(3,1)
167*6+1
1003/216
1/6^3*(1+3*2^3+3^4+3*4^3+3*4^3+3*5^3+6^3+5*6^2+6*5^2)
6^3
(1+3*2^3+3^4+3*4^3+3*4^3+3*5^3+6^3+5*6^2+6*5^2)
1411/216
3*(2^3+3^3+4^3+5^3)
55*6
330+672
5*6^2+6*5^2
1+3*2^3+3^4+3*4^3+3*4^3+3*5^3
1/6^3*(1+3*2^3+3^4+3*4^3+3*5^3+6^3+5*6^2+6*5^2)
?glm
x <- -5:5
y <- c(5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
plot(x,y)
dim(y)
length(y)
y2<-y[6:11]
x2<-[0:5]
x2<-0:5
lm(y2~x2)
?rep
rep(1:4, 2)
rep(1:4, each = 2)
lm(y2~x2-1)
x3<--5:5*(x>0)
x3
lm(y~x+x3)
library(MASS)
shuttle
str(shuttle)
fit<-glm(use~wind, data=shuttle, family=binomial)
summary(fit)
fit2<-glm(use~wind+magn, data=shuttle, family=binomial)
summary(fit2)
exp(fit$coef)
exp(-fit$coef)
1/exp(fit$coef)
exp(fit2$coef)
fit3<-glm(use~wind*magn, data=shuttle, family=binomial)
summary(fit3)
exp(fit3$coef)
InsectSprays
str(InsectSprays)
fit4<-glm(count~spray, data=InsectSprays, family=poisson)
summary(fit4)
exp(fit4$coef)
exp(-fit4$coef)
diamond
library(diamond)
library(Diamond)
?Diamond
?Diamonds
?diamonds
qplot(price, carat, data=diamonds,
facets = color ~ clarity)
library(ggplot2)
qplot(price, carat, data=diamonds,
facets = color ~ clarity)
diamonds
head(diamonds)
str(diamonds)
lm(price~., data=diamons)
lm(price~., data=diamonds)
summary(lm(price~., data=diamonds))
summary(lm(price~.-y-z, data=diamonds))
install.packages("pgmm")
library(pgmm)
data(olive)
olive = olive[,-1]
head(olive)
pre1<-train(Area~ ., data=olive, method="rpart")
install.packages(caret)
install.packages("caret")
install.packages("caret")
install.packages("caret")
install.packages("caret")
pre1<-train(Area~ ., data=olive, method="rpart")
library(caret)
library("caret")
install.packages("caret")
install.packages("caret")
library(caret)
library(caret)
library("caret")
remove.packages("caret")
install.packages(caret)
install.packages("caret")
library("caret")
pre1<-train(Area~ ., data=olive, method="rpart")
predict(pre1, newdata = as.data.frame(t(colMeans(olive))))
predict(pre1, newdata = as.data.frame(t(colMeans(olive))))
newdata = as.data.frame(t(colMeans(olive)))
predict(pre1, newdata)
plot(pre1)
plot(pre1$finalModel)
install.packages("rattel")
install.packages("rattle")
library(rattle)
fancyRpartPlot(pre1$finalModel)
install.packages("rpart.plot")
fancyRpartPlot(pre1$finalModel)
newdata
str(olive$Area)
summary(olive$Area)
head(olive$Area,20)
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
install.packages("ElemStatLearn")
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
head(trainSA)
pre2<-train(chd~age+ alcohol+ obesity+ tobacco+ typea+ldl, data=trainSA, method="glm", family="binomial")
set.seed(13234)
set.seed(13234)
pre2<-train(chd~age+ alcohol+ obesity+ tobacco+ typea+ldl, data=trainSA, method="glm", family="binomial")
predtr<-predict(pre2,trainSA)
missClass(trainSA$chd,predtr)
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass(trainSA$chd,predtr)
predte<-predict(pre2,testSA)
missClass(testSA$chd,predte)
confusionMatrix(pre2, testSA)
confusionMatrix(pre2, testSA$chd)
pre2$finalModel
summary(pre2$finalModel)
confusionMatrix(predict(pre2,testSA), testSA$chd)
confusionMatrix(predict(predte, testSA$chd)
confusionMatrix(predict(predte, testSA$chd))
confusionMatrix(predte, testSA$chd)
pre2<-train(chd~age+ alcohol+ obesity+ tobacco+ typea+ldl, data=trainSA, method="glm", family="binomial")
predtest<-predict(pre2,testSA)
confusionMatrix(predtest, testSA$chd)
predtest<-predict(pre2,testSA)
predyest
predyest
predtest
predtest<-predict(pre2,testSA, type="class")
predtest<-predict(pre2,testSA, type="raw")
predtest
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
head(vowel.train)
vowel.train$y<-as.factor(vowel.train$y)
vowel.test$y<-as.factor(vowel.test$y)
set.seed(33833)
pre3<-train(y~ . , data= vowel.train, method="rf")
pre3<-train(y~ . , data= vowel.train, method="rf")
?varImp
varImp(pre3)
set.seed(33833)
pre3<-train(y~ . , data= vowel.train, method="rf")
varImp(pre3)
confusionMatrix(predict(pre3,vowel.test), vowel.test$y)
pre4<-train(y~ ., data= vowel.train, method="gbm")
pre4<-train(y~ ., data= vowel.train, method="gbm")
confusionMatrix(predict(pre4,vowel.test), vowel.test$y)
confusionMatrix(predict(pre4,vowel.test), predict(pre3,vowel.test))
library(caret)
library(gbm)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
?deployApp
library(shiny)
?deployApp
library(shinyapps)
?deployApp
setwd("~/Data Science Certificate/09_dev/Project")
deployApp(appName="FindYourCar")
deployApp(appName="FindYourCar")
runApp()
shiny::runApp()
deployApp(appName="FindYourCar")
deployApp(appName="FindYourCar")
deployApp(appName="FindYourCar")
deployApp(appName="FindYourCar")
deployApp(appName="FindYourCarApp")
deployApp(appName="FindCarApp")
runApp()
runApp()
deployApp(appName="FindCarApp")
